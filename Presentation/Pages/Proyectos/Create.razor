@page "/proyectos/create"
@inject ProyectoService ProyectoService
@inject UsuarioService UsuarioService
@inject NavigationManager Navigation

<h3><i class="bi bi-plus-circle-fill"></i> Nuevo Proyecto</h3>

<EditForm Model="nuevoProyecto" OnValidSubmit="CrearProyecto">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Nombre:</label>
        <InputText class="form-control" @bind-Value="nuevoProyecto.Nombre" />
    </div>
    <div class="form-group">
        <label>Descripción:</label>
        <InputText class="form-control" @bind-Value="nuevoProyecto.Descripcion" />
    </div>
    <div class="form-group">
        <label>Fecha de Inicio:</label>
        <InputDate class="form-control" @bind-Value="nuevoProyecto.FechaInicio" TValue="DateTime" />
    </div>
    <div class="form-group">
        <label>Fecha de Fin:</label>
        <InputDate class="form-control" @bind-Value="nuevoProyecto.FechaFin" TValue="DateTime?" />
    </div>
    <div class="form-group">
        <label>Responsable:</label>
        <InputSelect class="form-select" @bind-Value="nuevoProyecto.UsuarioId" TValue="int?">
            <option value="">-- Seleccionar usuario --</option>
            @foreach (var u in usuarios)
            {
                <option value="@u.Id">@u.Nombre</option>
            }
        </InputSelect>
    </div>

    <button class="btn btn-success mt-3"><i class="bi bi-check-circle"></i> Crear</button>
</EditForm>

@code {
    private Proyecto nuevoProyecto = new();
    private List<Usuario> usuarios = new();

    protected override async Task OnInitializedAsync()
    {
        usuarios = await UsuarioService.ObtenerTodos();
    }

    private async Task CrearProyecto()
    {
        await ProyectoService.Crear(nuevoProyecto);
        Navigation.NavigateTo("/proyectos");
    }
}
