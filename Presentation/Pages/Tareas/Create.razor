@page "/tareas/create"
@inject TareaService TareaService
@inject UsuarioService UsuarioService
@inject NavigationManager Navigation

<h3><i class="bi bi-plus-circle-fill"></i> Nueva Tarea</h3>

<EditForm Model="nuevaTarea" OnValidSubmit="CrearTarea">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Título:</label>
        <InputText class="form-control" @bind-Value="nuevaTarea.Titulo" />
    </div>
    <div class="form-group">
        <label>Descripción:</label>
        <InputText class="form-control" @bind-Value="nuevaTarea.Descripcion" />
    </div>
    <div class="form-group">
        <label>Fecha Límite:</label>
        <InputDate class="form-control" @bind-Value="nuevaTarea.FechaLimite" TValue="DateTime" />
    </div>
    <div class="form-group">
        <label>Usuario:</label>
        <InputSelect class="form-select" @bind-Value="nuevaTarea.UsuarioId" TValue="int">
            <option value="0" disabled>-- Selecciona un usuario --</option>
            @foreach (var u in usuarios)
            {
                <option value="@u.Id">@u.Nombre</option>
            }
        </InputSelect>
    </div>

    <button class="btn btn-success mt-3"><i class="bi bi-check-circle"></i> Crear</button>
</EditForm>

@code {
    private Tarea nuevaTarea = new();
    private List<Usuario> usuarios = new();

    protected override async Task OnInitializedAsync()
    {
        usuarios = await UsuarioService.ObtenerTodos();
        if (usuarios.Any())
            nuevaTarea.UsuarioId = usuarios.First().Id;
    }

    private async Task CrearTarea()
    {
        await TareaService.Crear(nuevaTarea);
        Navigation.NavigateTo("/");
    }
}
